<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>project1/サイモンゲーム/ソースコード</title>
  <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@400;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="project1.css">
</head>
<body>
  <header>
    <h1>project1</h1>
    <h2>サイモンゲーム</h2>
    <h3>ソースコード</h3>
    <p>プログラマー志望 | ポートフォリオサイト</p>
  </header>
  <main class="container">
    <section class="source">
      <h2>ソースコード</h2>
	  <p>
// 選択肢（ボタン・LED）の定義
#define CHOICE_OFF      0 
#define CHOICE_NONE     0 
#define CHOICE_RED      (1 << 0)
#define CHOICE_GREEN    (1 << 1)
#define CHOICE_BLUE     (1 << 2)
#define CHOICE_YELLOW   (1 << 3)

// LEDのピン番号
#define LED_RED     10
#define LED_GREEN   3
#define LED_BLUE    13
#define LED_YELLOW  5

// ボタンのピン番号
#define BUTTON_RED    9
#define BUTTON_GREEN  2
#define BUTTON_BLUE   12
#define BUTTON_YELLOW 6

// ブザーのピン番号
#define BUZZER1  4
#define BUZZER2  7

// ゲーム設定
#define ROUNDS_TO_WIN      13     // 勝利までのラウンド数
#define ENTRY_TIME_LIMIT   3000   // 入力制限時間（ms）

// ゲームモード
#define MODE_MEMORY  0
#define MODE_BATTLE  1
#define MODE_BEEGEES 2

byte gameMode = MODE_MEMORY;
byte gameBoard[32]; // シーケンス保存用配列
byte gameRound = 0; // 現在のラウンド数

void setup()
{
  // ボタンとLEDの初期化
  pinMode(BUTTON_RED, INPUT_PULLUP);
  pinMode(BUTTON_GREEN, INPUT_PULLUP);
  pinMode(BUTTON_BLUE, INPUT_PULLUP);
  pinMode(BUTTON_YELLOW, INPUT_PULLUP);

  pinMode(LED_RED, OUTPUT);
  pinMode(LED_GREEN, OUTPUT);
  pinMode(LED_BLUE, OUTPUT);
  pinMode(LED_YELLOW, OUTPUT);

  pinMode(BUZZER1, OUTPUT);
  pinMode(BUZZER2, OUTPUT);

  gameMode = MODE_MEMORY;

  // YELLOWボタンが押されていたらビージーズモード起動
  if (checkButton() == CHOICE_YELLOW) play_beegees();

  // GREENボタンが押されていたらバトルモードへ
  if (checkButton() == CHOICE_GREEN)
  {
    gameMode = MODE_BATTLE;

    setLEDs(CHOICE_GREEN);
    toner(CHOICE_GREEN, 150);

    setLEDs(CHOICE_RED | CHOICE_BLUE | CHOICE_YELLOW);

    while(checkButton() != CHOICE_NONE); // ボタンが離されるまで待機
  }

  play_winner(); // 起動音
}

void loop()
{
  attractMode(); // ボタン待機中のアニメーション

  setLEDs(CHOICE_RED | CHOICE_GREEN | CHOICE_BLUE | CHOICE_YELLOW);
  delay(1000);
  setLEDs(CHOICE_OFF);
  delay(250);

  if (gameMode == MODE_MEMORY)
  {
    if (play_memory())
      play_winner(); // 勝利
    else
      play_loser();  // 敗北
  }

  if (gameMode == MODE_BATTLE)
  {
    play_battle();  // バトルモード実行
    play_loser();   // 負けたら敗北演出
  }
}

// メモリーモード：記憶ゲーム
boolean play_memory(void)
{
  randomSeed(millis());
  gameRound = 0;

  while (gameRound < ROUNDS_TO_WIN) 
  {
    add_to_moves();  // 新しい手を追加
    playMoves();     // シーケンス再生

    // プレイヤーが再入力
    for (byte currentMove = 0 ; currentMove < gameRound ; currentMove++)
    {
      byte choice = wait_for_button();

      if (choice == 0) return false;
      if (choice != gameBoard[currentMove]) return false;
    }

    delay(1000);
  }

  return true;
}

// バトルモード：交互に入力を追加
boolean play_battle(void)
{
  gameRound = 0;

  while (1)
  {
    byte newButton = wait_for_button();
    gameBoard[gameRound++] = newButton;

    for (byte currentMove = 0 ; currentMove < gameRound ; currentMove++)
    {
      byte choice = wait_for_button();
      if (choice == 0) return false;
      if (choice != gameBoard[currentMove]) return false;
    }

    delay(100);
  }

  return true;
}

// 現在のシーケンスを再生
void playMoves(void)
{
  for (byte currentMove = 0 ; currentMove < gameRound ; currentMove++) 
  {
    toner(gameBoard[currentMove], 150);
    delay(150);
  }
}

// ランダムに1手追加
void add_to_moves(void)
{
  byte newButton = random(0, 4);

  if(newButton == 0) newButton = CHOICE_RED;
  else if(newButton == 1) newButton = CHOICE_GREEN;
  else if(newButton == 2) newButton = CHOICE_BLUE;
  else if(newButton == 3) newButton = CHOICE_YELLOW;

  gameBoard[gameRound++] = newButton;
}

// LEDの表示
void setLEDs(byte leds)
{
  digitalWrite(LED_RED,    leds & CHOICE_RED    ? HIGH : LOW);
  digitalWrite(LED_GREEN,  leds & CHOICE_GREEN  ? HIGH : LOW);
  digitalWrite(LED_BLUE,   leds & CHOICE_BLUE   ? HIGH : LOW);
  digitalWrite(LED_YELLOW, leds & CHOICE_YELLOW ? HIGH : LOW);
}

// ボタン入力を待つ（制限時間あり）
byte wait_for_button(void)
{
  long startTime = millis();

  while ((millis() - startTime) < ENTRY_TIME_LIMIT)
  {
    byte button = checkButton();

    if (button != CHOICE_NONE)
    { 
      toner(button, 150);
      while(checkButton() != CHOICE_NONE);
      delay(10);
      return button;
    }
  }

  return CHOICE_NONE;
}

// 押されたボタンを返す
byte checkButton(void)
{
  if (!digitalRead(BUTTON_RED))    return CHOICE_RED;
  if (!digitalRead(BUTTON_GREEN))  return CHOICE_GREEN;
  if (!digitalRead(BUTTON_BLUE))   return CHOICE_BLUE;
  if (!digitalRead(BUTTON_YELLOW)) return CHOICE_YELLOW;

  return CHOICE_NONE;
}

// 対応するLEDと音を鳴らす
void toner(byte which, int buzz_length_ms)
{
  setLEDs(which);

  switch(which) 
  {
    case CHOICE_RED:    buzz_sound(buzz_length_ms, 1136); break;
    case CHOICE_GREEN:  buzz_sound(buzz_length_ms, 568);  break;
    case CHOICE_BLUE:   buzz_sound(buzz_length_ms, 851);  break;
    case CHOICE_YELLOW: buzz_sound(buzz_length_ms, 638);  break;
  }

  setLEDs(CHOICE_OFF);
}

// ブザー音再生
void buzz_sound(int buzz_length_ms, int buzz_delay_us)
{
  long buzz_length_us = buzz_length_ms * 1000L;

  while (buzz_length_us > buzz_delay_us * 2)
  {
    buzz_length_us -= buzz_delay_us * 2;

    digitalWrite(BUZZER1, LOW);
    digitalWrite(BUZZER2, HIGH);
    delayMicroseconds(buzz_delay_us);

    digitalWrite(BUZZER1, HIGH);
    digitalWrite(BUZZER2, LOW);
    delayMicroseconds(buzz_delay_us);
  }
}

// 勝利時の演出
void play_winner(void)
{
  setLEDs(CHOICE_GREEN | CHOICE_BLUE); winner_sound();
  setLEDs(CHOICE_RED | CHOICE_YELLOW); winner_sound();
  setLEDs(CHOICE_GREEN | CHOICE_BLUE); winner_sound();
  setLEDs(CHOICE_RED | CHOICE_YELLOW); winner_sound();
}

// 勝利音
void winner_sound(void)
{
  for (byte x = 250 ; x > 70 ; x--)
  {
    for (byte y = 0 ; y < 3 ; y++)
    {
      digitalWrite(BUZZER2, HIGH);
      digitalWrite(BUZZER1, LOW);
      delayMicroseconds(x);
      digitalWrite(BUZZER2, LOW);
      digitalWrite(BUZZER1, HIGH);
      delayMicroseconds(x);
    }
  }
}

// 敗北時の演出
void play_loser(void)
{
  setLEDs(CHOICE_RED | CHOICE_GREEN);   buzz_sound(255, 1500);
  setLEDs(CHOICE_BLUE | CHOICE_YELLOW); buzz_sound(255, 1500);
  setLEDs(CHOICE_RED | CHOICE_GREEN);   buzz_sound(255, 1500);
  setLEDs(CHOICE_BLUE | CHOICE_YELLOW); buzz_sound(255, 1500);
}

// デモアニメーション（ボタン入力待ち）
void attractMode(void)
{
  while(1) 
  {
    setLEDs(CHOICE_RED);    delay(100); if (checkButton()) return;
    setLEDs(CHOICE_BLUE);   delay(100); if (checkButton()) return;
    setLEDs(CHOICE_GREEN);  delay(100); if (checkButton()) return;
    setLEDs(CHOICE_YELLOW); delay(100); if (checkButton()) return;
  }
}

// ビージーズモード（YELLOW長押し起動）
void play_beegees()
{
  setLEDs(CHOICE_YELLOW);
  toner(CHOICE_YELLOW, 150);

  setLEDs(CHOICE_RED | CHOICE_GREEN | CHOICE_BLUE);
  while(checkButton() != CHOICE_NONE);
  setLEDs(CHOICE_NONE);

  delay(1000);
  digitalWrite(BUZZER1, LOW);
}

// LEDを順に切り替える
void changeLED(void)
{
  setLEDs(1 << LEDnumber);
  LEDnumber++;
  if(LEDnumber > 3) LEDnumber = 0;
}
    </p>
    </section>

    <section class="contact">
      <h2>お問い合わせ</h2>
      <p>メールアドレス: sss7hhh7uuu@gmail.com</p>
      <p>GitHub: <a href="https://github.com/aya72t" target="_blank">https://github.com/aya72t</a></p>
    </section>
  </main>
  <footer>
    &copy; 2025 Ayato Matsushita
  </footer>
</body>
</html>
